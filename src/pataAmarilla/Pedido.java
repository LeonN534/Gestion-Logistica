
package pataAmarilla;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import static pataAmarilla.Login.PASSWORD;
import static pataAmarilla.Login.URL;
import static pataAmarilla.Login.USERNAME;
import static pataAmarilla.Login.apellidos;
import static pataAmarilla.Login.area;
import static pataAmarilla.Login.dni;
import static pataAmarilla.Login.nombres;

public class Pedido extends javax.swing.JDialog {
    
    DefaultTableModel model;
    Date fechaActual = new Date();
    Calendar calendar = Calendar.getInstance();
    
    // Obtener la fecha futura
    // Crear un objeto SimpleDateFormat para formatear la fecha
    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd-MM-yyyy");
    // Formatear la fecha como un String en el formato deseado
    String fechaFormateada = formatoFecha.format(fechaActual);
    String fecha = fechaFormateada;
    String fechaFuturaFormateada;
    
    int numeroDePedido = 1;
    int numeroItem = 1;
   
    
    public Pedido() {
        calendar.setTime(fechaActual);
        calendar.add(Calendar.DAY_OF_YEAR, 30);
        Date fechaFutura = calendar.getTime();

        fechaFuturaFormateada = formatoFecha.format(fechaFutura);
        // Sumar 30 días a la fecha actual
        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement statement = connection.createStatement();

            // Consulta para obtener el número de la última solicitud
            String maxQuery = "SELECT MAX(numero_solicitud) AS max_numero FROM solicitud";
            ResultSet maxResultSet = statement.executeQuery(maxQuery);

            // Si hay resultados, obtén el valor máximo y aumenta en uno
            if (maxResultSet.next()) {
                int maxNumero = maxResultSet.getInt("max_numero");
                numeroDePedido = maxNumero + 1;
            }
            
            String consulta2 = "SELECT descripcion_meta FROM metas";
            ResultSet result2 = statement.executeQuery(consulta2);

            while(result2.next()) {
                
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField(apellidos + " " + nombres);
        jTextField2 = new javax.swing.JTextField(area);
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField(String.valueOf(numeroDePedido));
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField(fecha);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField3 = new javax.swing.JTextField(fechaFuturaFormateada);
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Solicitante");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, -1, -1));

        jLabel3.setText("Área");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, -1, -1));

        jLabel4.setText("Meta presupuestal");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        jButton1.setText("Añadir Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, -1, -1));

        jButton2.setText("GRABAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 660, 120, -1));

        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 650, -1));

        jTextField2.setEditable(false);
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 250, -1));

        jLabel5.setText("Número de solicitud");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));

        jTextField4.setEditable(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 250, -1));

        jLabel6.setText("Fecha");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, -1, -1));

        jTextField5.setEditable(false);
        getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 250, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {1, "", "", "", 0, 0, 0}
            },
            new Object [] {
                "Nº", "ID", "DESCRIPCION", "UNIDAD \nMEDIDA", "PRECIO \nUNITARIO", "CANTIDAD", "SUBTOTAL", "CATEGORIA", "TIPO"
            })
            {
                // Hacer que la columna 3 (índice 2) no sea editable
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column != 0 && column != 1  && column != 3 && column != 4 && column != 6 && column != 7 && column != 8; // Puedes ajustar el índice de la columna que deseas hacer no editable
                }
            }
        );
        JComboBox<String> comboBox = new JComboBox<>();

        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            // If no exception is thrown, the connection is successful.
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT descripcion_item FROM item";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            // Process the results
            while (resultSet.next()) {
                String descripcion = resultSet.getString("descripcion_item");
                comboBox.addItem(descripcion);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = jTable1.getSelectedRow();
                int selectedColumn = jTable1.getSelectedColumn();
                try {
                    Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
                    // If no exception is thrown, the connection is successful.
                    Statement statement = connection.createStatement();
                    String selectQuery = "SELECT item.id_item, item.precio, item.tipo, item.id_categoria, categoria.descripcion AS nombre_categoria, item.id_unidad_medida, unidad_medida.descripcion AS nombre_unidad " +
                    "FROM item " +
                    "INNER JOIN categoria ON item.id_categoria = categoria.id_categoria " +
                    "INNER JOIN unidad_medida ON item.id_unidad_medida = unidad_medida.id_unidad_medida " +
                    "WHERE descripcion_item = '" + String.valueOf(comboBox.getSelectedItem()) + "'";
                    ResultSet resultSet = statement.executeQuery(selectQuery);

                    if (selectedColumn == 2) {
                        jTable1.setValueAt(comboBox.getSelectedItem(), selectedRow, selectedColumn);

                        // Move the cursor to the first row in the ResultSet
                        if (resultSet.next()) {
                            jTable1.setValueAt(resultSet.getString("id_item"), selectedRow, 1);
                            jTable1.setValueAt(resultSet.getString("nombre_unidad"), selectedRow, 3);
                            jTable1.setValueAt(resultSet.getString("precio"), selectedRow, 4);
                            jTable1.setValueAt(resultSet.getString("nombre_categoria"), selectedRow, 7);
                            jTable1.setValueAt(resultSet.getString("tipo"), selectedRow, 8);
                        }
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jTable1.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(comboBox));
        jTable1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable1MouseMoved(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 230, 980, -1));

        jLabel1.setText("Fecha de llegada");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>());
        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement statement = connection.createStatement();

            String consulta2 = "SELECT descripcion_meta FROM metas";
            ResultSet result2 = statement.executeQuery(consulta2);

            while(result2.next()) {
                jComboBox1.addItem(result2.getString("descripcion_meta"));
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 250, -1));

        jTextField3.setEditable(false);
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, 240, -1));

        jLabel7.setText("ID meta");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, -1, -1));

        jTextField6.setEditable(false);
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        model = (DefaultTableModel) jTable1.getModel();
        numeroItem = numeroItem + 1;
        model.addRow(new Object[]{numeroItem, "", "", "", 0, 0, 0, ""});
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       // TODO add your handling code here:
       if(jTextField2.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Rellene los campos");
       } else {
            try {
                // Establecer la conexión
                Connection conexion = DriverManager.getConnection(URL, USERNAME, PASSWORD);

                 // Consulta SQL
                String insertar = "INSERT INTO solicitud (responsable, fecha_solicitud, id_meta, autorizacion_jefe_area, autorizacion_administracion, numero_pecosa, fecha_salida, fecha_entrega) VALUES (?, ?, ?, ?, ?, ?, ? , ?)";

                // Preparar la sentencia
                try (PreparedStatement pstmt = conexion.prepareStatement(insertar)) {
                    pstmt.setString(1, dni);
                    pstmt.setString(2, fecha);
                    pstmt.setInt(3, Integer.parseInt(jTextField6.getText()));
                    pstmt.setInt(4, 0);
                    pstmt.setInt(5, 0);
                    pstmt.setString(6, jTextField4.getText());
                    pstmt.setString(7, jTextField1.getText());
                    pstmt.setString(8, jTextField3.getText());
                    
                    pstmt.executeUpdate();
                    model = (DefaultTableModel) jTable1.getModel();
                    if (model.getRowCount() > 0) {
                        try (Connection conexión2 = DriverManager.getConnection(URL, USERNAME, PASSWORD)) {
                            // Iterar sobre las filas de la JTable
                            for (int fila = 0; fila < model.getRowCount(); fila++) {
                                // Insertar cada fila en la tabla de ventas con el mismo número de grupo
                                String insercionSQL = "INSERT INTO solicitud_detalle (unidad, cantidad_solicitado, numero_solicitud, id_item, precio, cantidad_entregado) VALUES (?, ?, ?, ?, ?, ?)";
                                try (PreparedStatement insercionDeVenta = conexion.prepareStatement(insercionSQL)) {
                                    insercionDeVenta.setString(1, String.valueOf(model.getValueAt(fila, 3))); 
                                    insercionDeVenta.setString(2, String.valueOf(model.getValueAt(fila, 6)));
                                    insercionDeVenta.setString(3, jTextField4.getText());
                                    insercionDeVenta.setString(4, String.valueOf(model.getValueAt(fila, 1)));
                                    insercionDeVenta.setString(5, String.valueOf(model.getValueAt(fila, 5)));
                                    insercionDeVenta.setString(6, String.valueOf(model.getValueAt(fila, 6)));

                                    insercionDeVenta.executeUpdate();
                                    
                                    JOptionPane.showMessageDialog(this, "Solicitud registrada con éxito");
                                    this.dispose();
                                    MenuPrincipal ventanaMenu = new MenuPrincipal();
                                    ventanaMenu.setLocationRelativeTo(null);
                                    ventanaMenu.setVisible(true);
                                }
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error inesperado. No se pudo registrar la solicitud." + e.getMessage());
                            this.dispose();
                            MenuPrincipal ventanaMenu = new MenuPrincipal();
                            ventanaMenu.setLocationRelativeTo(null);
                            ventanaMenu.setVisible(true);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Debe ingresar un plato en la tabla");
                    }
                }

                // Cerrar la conexión
                conexion.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
       } 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
        float floatValue1 = 0, floatValue2 = 0;
        model = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow >= 0) {
                Object value4;
                Object value5;

                // Get the values from columns 4 and 5 of the selected row
                value4 = jTable1.getValueAt(selectedRow, 4);
                value5 = jTable1.getValueAt(selectedRow, 5);


                if (value4 != null) {
                    try {
                        floatValue1 = Float.parseFloat(value4.toString());
                        // Now, 'floatValue' contains the float representation of the value in column 4
                    } catch (ClassCastException e) {
                        // Handle the case where the value in column 4 cannot be converted to a float
                        // For example, if it's not a numeric value
                    }
                }
                
                if (value5 != null) {
                    try {
                        floatValue2 = Float.parseFloat(value5.toString());
                        // Now, 'floatValue' contains the float representation of the value in column 4
                    } catch (ClassCastException e) {
                        // Handle the case where the value in column 4 cannot be converted to a float
                        // For example, if it's not a numeric value
                    }
                }

            

                // Calculate the product
                float product = floatValue1 * floatValue2;

                // Set the product value in column 6 of the selected row
                model.setValueAt(product, selectedRow, 6);
            }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTable1MouseMoved

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jTable1PropertyChange

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String textoSeleccionado = (String) jComboBox1.getSelectedItem();
        try {
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            // If no exception is thrown, the connection is successful.
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT id_meta FROM metas WHERE descripcion_meta = '" + textoSeleccionado + "'";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            // Move the cursor to the first row in the ResultSet
            if (resultSet.next()) {
                jTextField6.setText(String.valueOf(resultSet.getInt("id_meta")));
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
